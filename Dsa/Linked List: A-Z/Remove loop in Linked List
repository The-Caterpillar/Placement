public:
    //Function to remove a loop in the linked list.
    void removeLoop(Node* head)
    {
        // code here
        // just remove the loop without losing any nodes
        if(head==NULL) return;
        if(head->next==NULL) return;
        
        Node *slow = head, *fast = head;
        
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            slow = slow->next;
            fast = fast->next->next;
            
            if(slow==fast)
            {
                Node *start1 = head, *start2 = slow;
                while(start1!=start2)
                {
                    start1=start1->next;
                    start2=start2->next;
                }
    // start1==start2; Point of intersection // Node where the looping node points to
                
                if(start1->next == start1) // If it's a self looping node
                   { start1->next = NULL; return; }
            
                Node *last_node = start1->next;
                while(last_node->next!=start1) // Finding the last node
                {
                    last_node = last_node->next;
                }
                last_node->next = NULL; return; // Deleting the loop
            }
        }
    }
