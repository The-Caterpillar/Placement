// Solution using extra space

long long trappingWater(int arr[], int n)
    {
        // code here
        long long quantity = 0;
        vector<int> prev, next;
        int MAX_prev=arr[0], MAX_next=arr[n-1];
        
        for(int i=0; i<n; ++i)
        {
            MAX_prev = max(MAX_prev,arr[i]);
            prev.push_back(MAX_prev);
        }
        for(int i=n-1; i>=0; --i)
        {
            MAX_next = max(MAX_next,arr[i]);
            next.push_back(MAX_next);
        }
        reverse(next.begin(),next.end());
        
//         7
//        8 8 2 4 5 5 1
        // -3 3 1 0 3
        for(int i=1; i<=n-2; ++i)
        {
            long long x = min(prev[i],next[i]) - arr[i];
            if(x>0) quantity = quantity + x; 
        }
    return quantity;
    }
